/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision.salesvision.Customers;
import com.salesvision.salesvision.Reps;
import com.salesvision.salesvision.States;
import com.salesvision.salesvision.service.StatesService;


/**
 * Controller object for domain model class States.
 * @see States
 */
@RestController("SalesVision.StatesController")
@Api(value = "StatesController", description = "Exposes APIs to work with States resource.")
@RequestMapping("/SalesVision/States")
public class StatesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatesController.class);

    @Autowired
	@Qualifier("SalesVision.StatesService")
	private StatesService statesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new States instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public States createStates(@RequestBody States states) {
		LOGGER.debug("Create States with information: {}" , states);

		states = statesService.create(states);
		LOGGER.debug("Created States with information: {}" , states);

	    return states;
	}

    @ApiOperation(value = "Returns the States instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public States getStates(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting States with id: {}" , id);

        States foundStates = statesService.getById(id);
        LOGGER.debug("States details with id: {}" , foundStates);

        return foundStates;
    }

    @ApiOperation(value = "Updates the States instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public States editStates(@PathVariable("id") Integer id, @RequestBody States states) {
        LOGGER.debug("Editing States with id: {}" , states.getId());

        states.setId(id);
        states = statesService.update(states);
        LOGGER.debug("States details with id: {}" , states);

        return states;
    }
    
    @ApiOperation(value = "Partially updates the States instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public States patchStates(@PathVariable("id") Integer id, @RequestBody @MapTo(States.class) Map<String, Object> statesPatch) {
        LOGGER.debug("Partially updating States with id: {}" , id);

        States states = statesService.partialUpdate(id, statesPatch);
        LOGGER.debug("States details after partial update: {}" , states);

        return states;
    }

    @ApiOperation(value = "Deletes the States instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStates(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting States with id: {}" , id);

        States deletedStates = statesService.delete(id);

        return deletedStates != null;
    }

    /**
     * @deprecated Use {@link #findStates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of States instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<States> searchStatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering States list by query filter:{}", (Object) queryFilters);
        return statesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of States instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<States> findStates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering States list by filter:", query);
        return statesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of States instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<States> filterStates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering States list by filter", query);
        return statesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return statesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStatesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = States.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> statesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of States instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting States");
		return statesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStatesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return statesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/customerses")
    @ApiOperation(value = "Gets the customerses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Customers> findAssociatedCustomerses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated customerses");
        return statesService.findAssociatedCustomerses(id, pageable);
    }

    @GetMapping(value="/{id:.+}/repses")
    @ApiOperation(value = "Gets the repses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Reps> findAssociatedRepses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated repses");
        return statesService.findAssociatedRepses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StatesService instance
	 */
	protected void setStatesService(StatesService service) {
		this.statesService = service;
	}

}
