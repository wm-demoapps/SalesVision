/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision.salesvision.TaskPriority;
import com.salesvision.salesvision.Tasks;
import com.salesvision.salesvision.service.TaskPriorityService;


/**
 * Controller object for domain model class TaskPriority.
 * @see TaskPriority
 */
@RestController("SalesVision.TaskPriorityController")
@Api(value = "TaskPriorityController", description = "Exposes APIs to work with TaskPriority resource.")
@RequestMapping("/SalesVision/TaskPriority")
public class TaskPriorityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaskPriorityController.class);

    @Autowired
	@Qualifier("SalesVision.TaskPriorityService")
	private TaskPriorityService taskPriorityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TaskPriority instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskPriority createTaskPriority(@RequestBody TaskPriority taskPriorityInstance) {
		LOGGER.debug("Create TaskPriority with information: {}" , taskPriorityInstance);

		taskPriorityInstance = taskPriorityService.create(taskPriorityInstance);
		LOGGER.debug("Created TaskPriority with information: {}" , taskPriorityInstance);

	    return taskPriorityInstance;
	}

    @ApiOperation(value = "Returns the TaskPriority instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskPriority getTaskPriority(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TaskPriority with id: {}" , id);

        TaskPriority foundTaskPriority = taskPriorityService.getById(id);
        LOGGER.debug("TaskPriority details with id: {}" , foundTaskPriority);

        return foundTaskPriority;
    }

    @ApiOperation(value = "Updates the TaskPriority instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskPriority editTaskPriority(@PathVariable("id") Integer id, @RequestBody TaskPriority taskPriorityInstance) {
        LOGGER.debug("Editing TaskPriority with id: {}" , taskPriorityInstance.getId());

        taskPriorityInstance.setId(id);
        taskPriorityInstance = taskPriorityService.update(taskPriorityInstance);
        LOGGER.debug("TaskPriority details with id: {}" , taskPriorityInstance);

        return taskPriorityInstance;
    }
    
    @ApiOperation(value = "Partially updates the TaskPriority instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TaskPriority patchTaskPriority(@PathVariable("id") Integer id, @RequestBody @MapTo(TaskPriority.class) Map<String, Object> taskPriorityInstancePatch) {
        LOGGER.debug("Partially updating TaskPriority with id: {}" , id);

        TaskPriority taskPriorityInstance = taskPriorityService.partialUpdate(id, taskPriorityInstancePatch);
        LOGGER.debug("TaskPriority details after partial update: {}" , taskPriorityInstance);

        return taskPriorityInstance;
    }

    @ApiOperation(value = "Deletes the TaskPriority instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTaskPriority(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TaskPriority with id: {}" , id);

        TaskPriority deletedTaskPriority = taskPriorityService.delete(id);

        return deletedTaskPriority != null;
    }

    /**
     * @deprecated Use {@link #findTaskPriorities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TaskPriority instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskPriority> searchTaskPrioritiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaskPriorities list by query filter:{}", (Object) queryFilters);
        return taskPriorityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaskPriority instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskPriority> findTaskPriorities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaskPriorities list by filter:", query);
        return taskPriorityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TaskPriority instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TaskPriority> filterTaskPriorities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaskPriorities list by filter", query);
        return taskPriorityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTaskPriorities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return taskPriorityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTaskPrioritiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TaskPriority.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> taskPriorityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TaskPriority instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTaskPriorities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TaskPriorities");
		return taskPriorityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTaskPriorityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return taskPriorityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/taskses")
    @ApiOperation(value = "Gets the taskses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tasks> findAssociatedTaskses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated taskses");
        return taskPriorityService.findAssociatedTaskses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaskPriorityService instance
	 */
	protected void setTaskPriorityService(TaskPriorityService service) {
		this.taskPriorityService = service;
	}

}
