/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision.salesvision.Badges;
import com.salesvision.salesvision.service.BadgesService;


/**
 * Controller object for domain model class Badges.
 * @see Badges
 */
@RestController("SalesVision.BadgesController")
@Api(value = "BadgesController", description = "Exposes APIs to work with Badges resource.")
@RequestMapping("/SalesVision/Badges")
public class BadgesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BadgesController.class);

    @Autowired
	@Qualifier("SalesVision.BadgesService")
	private BadgesService badgesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Badges instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Badges createBadges(@RequestBody Badges badges) {
		LOGGER.debug("Create Badges with information: {}" , badges);

		badges = badgesService.create(badges);
		LOGGER.debug("Created Badges with information: {}" , badges);

	    return badges;
	}

    @ApiOperation(value = "Returns the Badges instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Badges getBadges(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Badges with id: {}" , id);

        Badges foundBadges = badgesService.getById(id);
        LOGGER.debug("Badges details with id: {}" , foundBadges);

        return foundBadges;
    }

    @ApiOperation(value = "Updates the Badges instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Badges editBadges(@PathVariable("id") Integer id, @RequestBody Badges badges) {
        LOGGER.debug("Editing Badges with id: {}" , badges.getId());

        badges.setId(id);
        badges = badgesService.update(badges);
        LOGGER.debug("Badges details with id: {}" , badges);

        return badges;
    }
    
    @ApiOperation(value = "Partially updates the Badges instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Badges patchBadges(@PathVariable("id") Integer id, @RequestBody @MapTo(Badges.class) Map<String, Object> badgesPatch) {
        LOGGER.debug("Partially updating Badges with id: {}" , id);

        Badges badges = badgesService.partialUpdate(id, badgesPatch);
        LOGGER.debug("Badges details after partial update: {}" , badges);

        return badges;
    }

    @ApiOperation(value = "Deletes the Badges instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBadges(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Badges with id: {}" , id);

        Badges deletedBadges = badgesService.delete(id);

        return deletedBadges != null;
    }

    /**
     * @deprecated Use {@link #findBadges(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Badges instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Badges> searchBadgesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Badges list by query filter:{}", (Object) queryFilters);
        return badgesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Badges instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Badges> findBadges(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Badges list by filter:", query);
        return badgesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Badges instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Badges> filterBadges(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Badges list by filter", query);
        return badgesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBadges(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return badgesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBadgesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Badges.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> badgesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Badges instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBadges( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Badges");
		return badgesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBadgesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return badgesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BadgesService instance
	 */
	protected void setBadgesService(BadgesService service) {
		this.badgesService = service;
	}

}
