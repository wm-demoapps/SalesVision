/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision.salesvision.Rewards;
import com.salesvision.salesvision.service.RewardsService;


/**
 * Controller object for domain model class Rewards.
 * @see Rewards
 */
@RestController("SalesVision.RewardsController")
@Api(value = "RewardsController", description = "Exposes APIs to work with Rewards resource.")
@RequestMapping("/SalesVision/Rewards")
public class RewardsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RewardsController.class);

    @Autowired
	@Qualifier("SalesVision.RewardsService")
	private RewardsService rewardsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Rewards instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rewards createRewards(@RequestBody Rewards rewards) {
		LOGGER.debug("Create Rewards with information: {}" , rewards);

		rewards = rewardsService.create(rewards);
		LOGGER.debug("Created Rewards with information: {}" , rewards);

	    return rewards;
	}

    @ApiOperation(value = "Returns the Rewards instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rewards getRewards(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Rewards with id: {}" , id);

        Rewards foundRewards = rewardsService.getById(id);
        LOGGER.debug("Rewards details with id: {}" , foundRewards);

        return foundRewards;
    }

    @ApiOperation(value = "Updates the Rewards instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rewards editRewards(@PathVariable("id") Integer id, @RequestBody Rewards rewards) {
        LOGGER.debug("Editing Rewards with id: {}" , rewards.getId());

        rewards.setId(id);
        rewards = rewardsService.update(rewards);
        LOGGER.debug("Rewards details with id: {}" , rewards);

        return rewards;
    }
    
    @ApiOperation(value = "Partially updates the Rewards instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Rewards patchRewards(@PathVariable("id") Integer id, @RequestBody @MapTo(Rewards.class) Map<String, Object> rewardsPatch) {
        LOGGER.debug("Partially updating Rewards with id: {}" , id);

        Rewards rewards = rewardsService.partialUpdate(id, rewardsPatch);
        LOGGER.debug("Rewards details after partial update: {}" , rewards);

        return rewards;
    }

    @ApiOperation(value = "Deletes the Rewards instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRewards(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Rewards with id: {}" , id);

        Rewards deletedRewards = rewardsService.delete(id);

        return deletedRewards != null;
    }

    /**
     * @deprecated Use {@link #findRewards(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Rewards instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rewards> searchRewardsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Rewards list by query filter:{}", (Object) queryFilters);
        return rewardsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Rewards instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rewards> findRewards(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Rewards list by filter:", query);
        return rewardsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Rewards instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Rewards> filterRewards(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Rewards list by filter", query);
        return rewardsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRewards(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return rewardsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRewardsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Rewards.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> rewardsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Rewards instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRewards( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Rewards");
		return rewardsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRewardsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return rewardsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RewardsService instance
	 */
	protected void setRewardsService(RewardsService service) {
		this.rewardsService = service;
	}

}
