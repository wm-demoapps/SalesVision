/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.salesvision.salesvision.service.SalesVisionQueryExecutorService;
import com.salesvision.salesvision.models.query.*;

@RestController(value = "SalesVision.QueryExecutionController")
@RequestMapping("/SalesVision/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private SalesVisionQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @GetMapping(value = "/queries/getDealStatus")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getting the deal status based on managerId and dates")
    public Page<GetDealStatusResponse> executeGetDealStatus(@RequestParam(value = "reportingHead") String reportingHead, @RequestParam(value = "fromDate") String fromDate, @RequestParam(value = "toDate") String toDate, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDealStatus");
        Page<GetDealStatusResponse> _result = queryService.executeGetDealStatus(reportingHead, fromDate, toDate, pageable);
        LOGGER.debug("got the result for named query: getDealStatus, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDealStatus")
    @PostMapping(value = "/queries/getDealStatus/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetDealStatus(@RequestParam(value = "reportingHead") String reportingHead, @RequestParam(value = "fromDate") String fromDate, @RequestParam(value = "toDate") String toDate, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDealStatus");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDealStatus";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDealStatus(reportingHead, fromDate, toDate,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getExistingCustomers")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getExistingCustomers")
    public Page<GetExistingCustomersResponse> executeGetExistingCustomers(@RequestParam(value = "repid") String repid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getExistingCustomers");
        Page<GetExistingCustomersResponse> _result = queryService.executeGetExistingCustomers(repid, pageable);
        LOGGER.debug("got the result for named query: getExistingCustomers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getExistingCustomers")
    @PostMapping(value = "/queries/getExistingCustomers/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetExistingCustomers(@RequestParam(value = "repid") String repid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getExistingCustomers");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getExistingCustomers";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetExistingCustomers(repid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @PutMapping(value = "/queries/updateQuoteStatusConverted")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update quote status to converted")
    public IntegerWrapper executeUpdateQuoteStatusConverted(@Valid @RequestBody UpdateQuoteStatusConvertedRequest updateQuoteStatusConvertedRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updateQuoteStatusConverted");
        Integer _result = queryService.executeUpdateQuoteStatusConverted(updateQuoteStatusConvertedRequest);
        LOGGER.debug("got the result for named query: updateQuoteStatusConverted, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @GetMapping(value = "/queries/getRepsCount")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getRepsCount")
    public Page<GetRepsCountResponse> executeGetRepsCount(@RequestParam(value = "head") String head, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getRepsCount");
        Page<GetRepsCountResponse> _result = queryService.executeGetRepsCount(head, pageable);
        LOGGER.debug("got the result for named query: getRepsCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getRepsCount")
    @PostMapping(value = "/queries/getRepsCount/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetRepsCount(@RequestParam(value = "head") String head, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRepsCount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getRepsCount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetRepsCount(head,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getSalesSum")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Return sales sum of given manager or reps")
    public GetSalesSumResponse executeGetSalesSum(@RequestParam(value = "fromDate") String fromDate, @RequestParam(value = "toDate") String toDate, @RequestParam(value = "reportingHead", required = false) String reportingHead, @RequestParam(value = "repID", required = false) String repId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getSalesSum");
        GetSalesSumResponse _result = queryService.executeGetSalesSum(fromDate, toDate, reportingHead, repId);
        LOGGER.debug("got the result for named query: getSalesSum, result:{}", _result);
        return _result;
    }

    @GetMapping(value = "/queries/getTopPerformers")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the top performers under the given headID")
    public Page<GetTopPerformersResponse> executeGetTopPerformers(@RequestParam(value = "target") String target, @RequestParam(value = "reportingHeadId") String reportingHeadId, @RequestParam(value = "fromDate") String fromDate, @RequestParam(value = "toDate") String toDate, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTopPerformers");
        Page<GetTopPerformersResponse> _result = queryService.executeGetTopPerformers(target, reportingHeadId, fromDate, toDate, pageable);
        LOGGER.debug("got the result for named query: getTopPerformers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTopPerformers")
    @PostMapping(value = "/queries/getTopPerformers/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetTopPerformers(@RequestParam(value = "target") String target, @RequestParam(value = "reportingHeadId") String reportingHeadId, @RequestParam(value = "fromDate") String fromDate, @RequestParam(value = "toDate") String toDate, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTopPerformers");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTopPerformers";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTopPerformers(target, reportingHeadId, fromDate, toDate,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @GetMapping(value = "/queries/getTopSellingSales")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Return sum of sales respective to products")
    public Page<GetTopSellingSalesResponse> executeGetTopSellingSales(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getTopSellingSales");
        Page<GetTopSellingSalesResponse> _result = queryService.executeGetTopSellingSales(pageable);
        LOGGER.debug("got the result for named query: getTopSellingSales, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getTopSellingSales")
    @PostMapping(value = "/queries/getTopSellingSales/export")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGetTopSellingSales(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getTopSellingSales");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getTopSellingSales";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetTopSellingSales( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}
