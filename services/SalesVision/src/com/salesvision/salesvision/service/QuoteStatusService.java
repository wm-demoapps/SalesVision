/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.QuoteStatus;
import com.salesvision.salesvision.Quotes;

/**
 * Service object for domain model class {@link QuoteStatus}.
 */
public interface QuoteStatusService {

    /**
     * Creates a new QuoteStatus. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on QuoteStatus if any.
     *
     * @param quoteStatusInstance Details of the QuoteStatus to be created; value cannot be null.
     * @return The newly created QuoteStatus.
     */
    QuoteStatus create(@Valid QuoteStatus quoteStatusInstance);


	/**
     * Returns QuoteStatus by given id if exists.
     *
     * @param quotestatusId The id of the QuoteStatus to get; value cannot be null.
     * @return QuoteStatus associated with the given quotestatusId.
	 * @throws EntityNotFoundException If no QuoteStatus is found.
     */
    QuoteStatus getById(Integer quotestatusId);

    /**
     * Find and return the QuoteStatus by given id if exists, returns null otherwise.
     *
     * @param quotestatusId The id of the QuoteStatus to get; value cannot be null.
     * @return QuoteStatus associated with the given quotestatusId.
     */
    QuoteStatus findById(Integer quotestatusId);

	/**
     * Find and return the list of QuoteStatuses by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param quotestatusIds The id's of the QuoteStatus to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return QuoteStatuses associated with the given quotestatusIds.
     */
    List<QuoteStatus> findByMultipleIds(List<Integer> quotestatusIds, boolean orderedReturn);


    /**
     * Updates the details of an existing QuoteStatus. It replaces all fields of the existing QuoteStatus with the given quoteStatusInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on QuoteStatus if any.
     *
     * @param quoteStatusInstance The details of the QuoteStatus to be updated; value cannot be null.
     * @return The updated QuoteStatus.
     * @throws EntityNotFoundException if no QuoteStatus is found with given input.
     */
    QuoteStatus update(@Valid QuoteStatus quoteStatusInstance);


    /**
     * Partially updates the details of an existing QuoteStatus. It updates only the
     * fields of the existing QuoteStatus which are passed in the quoteStatusInstancePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on QuoteStatus if any.
     *
     * @param quotestatusId The id of the QuoteStatus to be deleted; value cannot be null.
     * @param quoteStatusInstancePatch The partial data of QuoteStatus which is supposed to be updated; value cannot be null.
     * @return The updated QuoteStatus.
     * @throws EntityNotFoundException if no QuoteStatus is found with given input.
     */
    QuoteStatus partialUpdate(Integer quotestatusId, Map<String, Object> quoteStatusInstancePatch);

    /**
     * Deletes an existing QuoteStatus with the given id.
     *
     * @param quotestatusId The id of the QuoteStatus to be deleted; value cannot be null.
     * @return The deleted QuoteStatus.
     * @throws EntityNotFoundException if no QuoteStatus found with the given id.
     */
    QuoteStatus delete(Integer quotestatusId);

    /**
     * Deletes an existing QuoteStatus with the given object.
     *
     * @param quoteStatusInstance The instance of the QuoteStatus to be deleted; value cannot be null.
     */
    void delete(QuoteStatus quoteStatusInstance);

    /**
     * Find all QuoteStatuses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching QuoteStatuses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<QuoteStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all QuoteStatuses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching QuoteStatuses.
     *
     * @see Pageable
     * @see Page
     */
    Page<QuoteStatus> findAll(String query, Pageable pageable);

    /**
     * Exports all QuoteStatuses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all QuoteStatuses matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the QuoteStatuses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the QuoteStatus.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated quoteses for given QuoteStatus id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Quotes instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Quotes> findAssociatedQuoteses(Integer id, Pageable pageable);

}
