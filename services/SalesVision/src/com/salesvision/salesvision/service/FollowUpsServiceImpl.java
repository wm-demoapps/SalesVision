/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.FollowUps;


/**
 * ServiceImpl object for domain model class FollowUps.
 *
 * @see FollowUps
 */
@Service("SalesVision.FollowUpsService")
@Validated
@EntityService(entityClass = FollowUps.class, serviceId = "SalesVision")
public class FollowUpsServiceImpl implements FollowUpsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FollowUpsServiceImpl.class);


    @Autowired
    @Qualifier("SalesVision.FollowUpsDao")
    private WMGenericDao<FollowUps, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<FollowUps, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public FollowUps create(FollowUps followUps) {
        LOGGER.debug("Creating a new FollowUps with information: {}", followUps);

        FollowUps followUpsCreated = this.wmGenericDao.create(followUps);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(followUpsCreated);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public FollowUps getById(Integer followupsId) {
        LOGGER.debug("Finding FollowUps by id: {}", followupsId);
        return this.wmGenericDao.findById(followupsId);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public FollowUps findById(Integer followupsId) {
        LOGGER.debug("Finding FollowUps by id: {}", followupsId);
        try {
            return this.wmGenericDao.findById(followupsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No FollowUps found with id: {}", followupsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public List<FollowUps> findByMultipleIds(List<Integer> followupsIds, boolean orderedReturn) {
        LOGGER.debug("Finding FollowUps by ids: {}", followupsIds);

        return this.wmGenericDao.findByMultipleIds(followupsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesVisionTransactionManager")
    @Override
    public FollowUps update(FollowUps followUps) {
        LOGGER.debug("Updating FollowUps with information: {}", followUps);

        this.wmGenericDao.update(followUps);
        this.wmGenericDao.refresh(followUps);

        return followUps;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public FollowUps partialUpdate(Integer followupsId, Map<String, Object>followUpsPatch) {
        LOGGER.debug("Partially Updating the FollowUps with id: {}", followupsId);

        FollowUps followUps = getById(followupsId);

        try {
            ObjectReader followUpsReader = this.objectMapper.reader().forType(FollowUps.class).withValueToUpdate(followUps);
            followUps = followUpsReader.readValue(this.objectMapper.writeValueAsString(followUpsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", followUpsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        followUps = update(followUps);

        return followUps;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public FollowUps delete(Integer followupsId) {
        LOGGER.debug("Deleting FollowUps with id: {}", followupsId);
        FollowUps deleted = this.wmGenericDao.findById(followupsId);
        if (deleted == null) {
            LOGGER.debug("No FollowUps found with id: {}", followupsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), FollowUps.class.getSimpleName(), followupsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public void delete(FollowUps followUps) {
        LOGGER.debug("Deleting FollowUps with {}", followUps);
        this.wmGenericDao.delete(followUps);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<FollowUps> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FollowUps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<FollowUps> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FollowUps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SalesVision for table FollowUps to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SalesVision for table FollowUps to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
