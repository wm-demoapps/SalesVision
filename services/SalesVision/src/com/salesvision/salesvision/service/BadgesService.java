/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.Badges;

/**
 * Service object for domain model class {@link Badges}.
 */
public interface BadgesService {

    /**
     * Creates a new Badges. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Badges if any.
     *
     * @param badges Details of the Badges to be created; value cannot be null.
     * @return The newly created Badges.
     */
    Badges create(@Valid Badges badges);


	/**
     * Returns Badges by given id if exists.
     *
     * @param badgesId The id of the Badges to get; value cannot be null.
     * @return Badges associated with the given badgesId.
	 * @throws EntityNotFoundException If no Badges is found.
     */
    Badges getById(Integer badgesId);

    /**
     * Find and return the Badges by given id if exists, returns null otherwise.
     *
     * @param badgesId The id of the Badges to get; value cannot be null.
     * @return Badges associated with the given badgesId.
     */
    Badges findById(Integer badgesId);

	/**
     * Find and return the list of Badges by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param badgesIds The id's of the Badges to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Badges associated with the given badgesIds.
     */
    List<Badges> findByMultipleIds(List<Integer> badgesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Badges. It replaces all fields of the existing Badges with the given badges.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Badges if any.
     *
     * @param badges The details of the Badges to be updated; value cannot be null.
     * @return The updated Badges.
     * @throws EntityNotFoundException if no Badges is found with given input.
     */
    Badges update(@Valid Badges badges);


    /**
     * Partially updates the details of an existing Badges. It updates only the
     * fields of the existing Badges which are passed in the badgesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Badges if any.
     *
     * @param badgesId The id of the Badges to be deleted; value cannot be null.
     * @param badgesPatch The partial data of Badges which is supposed to be updated; value cannot be null.
     * @return The updated Badges.
     * @throws EntityNotFoundException if no Badges is found with given input.
     */
    Badges partialUpdate(Integer badgesId, Map<String, Object> badgesPatch);

    /**
     * Deletes an existing Badges with the given id.
     *
     * @param badgesId The id of the Badges to be deleted; value cannot be null.
     * @return The deleted Badges.
     * @throws EntityNotFoundException if no Badges found with the given id.
     */
    Badges delete(Integer badgesId);

    /**
     * Deletes an existing Badges with the given object.
     *
     * @param badges The instance of the Badges to be deleted; value cannot be null.
     */
    void delete(Badges badges);

    /**
     * Find all Badges matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Badges.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Badges> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Badges matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Badges.
     *
     * @see Pageable
     * @see Page
     */
    Page<Badges> findAll(String query, Pageable pageable);

    /**
     * Exports all Badges matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Badges matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Badges in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Badges.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
