/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.Sales;


/**
 * ServiceImpl object for domain model class Sales.
 *
 * @see Sales
 */
@Service("SalesVision.SalesService")
@Validated
@EntityService(entityClass = Sales.class, serviceId = "SalesVision")
public class SalesServiceImpl implements SalesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesServiceImpl.class);


    @Autowired
    @Qualifier("SalesVision.SalesDao")
    private WMGenericDao<Sales, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Sales, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Sales create(Sales salesInstance) {
        LOGGER.debug("Creating a new Sales with information: {}", salesInstance);

        Sales salesInstanceCreated = this.wmGenericDao.create(salesInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(salesInstanceCreated);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Sales getById(Integer salesId) {
        LOGGER.debug("Finding Sales by id: {}", salesId);
        return this.wmGenericDao.findById(salesId);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Sales findById(Integer salesId) {
        LOGGER.debug("Finding Sales by id: {}", salesId);
        try {
            return this.wmGenericDao.findById(salesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Sales found with id: {}", salesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public List<Sales> findByMultipleIds(List<Integer> salesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Sales by ids: {}", salesIds);

        return this.wmGenericDao.findByMultipleIds(salesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesVisionTransactionManager")
    @Override
    public Sales update(Sales salesInstance) {
        LOGGER.debug("Updating Sales with information: {}", salesInstance);

        this.wmGenericDao.update(salesInstance);
        this.wmGenericDao.refresh(salesInstance);

        return salesInstance;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Sales partialUpdate(Integer salesId, Map<String, Object>salesInstancePatch) {
        LOGGER.debug("Partially Updating the Sales with id: {}", salesId);

        Sales salesInstance = getById(salesId);

        try {
            ObjectReader salesInstanceReader = this.objectMapper.reader().forType(Sales.class).withValueToUpdate(salesInstance);
            salesInstance = salesInstanceReader.readValue(this.objectMapper.writeValueAsString(salesInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", salesInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        salesInstance = update(salesInstance);

        return salesInstance;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Sales delete(Integer salesId) {
        LOGGER.debug("Deleting Sales with id: {}", salesId);
        Sales deleted = this.wmGenericDao.findById(salesId);
        if (deleted == null) {
            LOGGER.debug("No Sales found with id: {}", salesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Sales.class.getSimpleName(), salesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public void delete(Sales salesInstance) {
        LOGGER.debug("Deleting Sales with {}", salesInstance);
        this.wmGenericDao.delete(salesInstance);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Sales> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Sales");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Sales> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Sales");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SalesVision for table Sales to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SalesVision for table Sales to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
