/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.Channels;
import com.salesvision.salesvision.Reps;


/**
 * ServiceImpl object for domain model class Channels.
 *
 * @see Channels
 */
@Service("SalesVision.ChannelsService")
@Validated
@EntityService(entityClass = Channels.class, serviceId = "SalesVision")
public class ChannelsServiceImpl implements ChannelsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChannelsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SalesVision.RepsService")
    private RepsService repsService;

    @Autowired
    @Qualifier("SalesVision.ChannelsDao")
    private WMGenericDao<Channels, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Channels, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Channels create(Channels channels) {
        LOGGER.debug("Creating a new Channels with information: {}", channels);

        Channels channelsCreated = this.wmGenericDao.create(channels);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(channelsCreated);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Channels getById(Integer channelsId) {
        LOGGER.debug("Finding Channels by id: {}", channelsId);
        return this.wmGenericDao.findById(channelsId);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Channels findById(Integer channelsId) {
        LOGGER.debug("Finding Channels by id: {}", channelsId);
        try {
            return this.wmGenericDao.findById(channelsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Channels found with id: {}", channelsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public List<Channels> findByMultipleIds(List<Integer> channelsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Channels by ids: {}", channelsIds);

        return this.wmGenericDao.findByMultipleIds(channelsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesVisionTransactionManager")
    @Override
    public Channels update(Channels channels) {
        LOGGER.debug("Updating Channels with information: {}", channels);

        this.wmGenericDao.update(channels);
        this.wmGenericDao.refresh(channels);

        return channels;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Channels partialUpdate(Integer channelsId, Map<String, Object>channelsPatch) {
        LOGGER.debug("Partially Updating the Channels with id: {}", channelsId);

        Channels channels = getById(channelsId);

        try {
            ObjectReader channelsReader = this.objectMapper.reader().forType(Channels.class).withValueToUpdate(channels);
            channels = channelsReader.readValue(this.objectMapper.writeValueAsString(channelsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", channelsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        channels = update(channels);

        return channels;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Channels delete(Integer channelsId) {
        LOGGER.debug("Deleting Channels with id: {}", channelsId);
        Channels deleted = this.wmGenericDao.findById(channelsId);
        if (deleted == null) {
            LOGGER.debug("No Channels found with id: {}", channelsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Channels.class.getSimpleName(), channelsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public void delete(Channels channels) {
        LOGGER.debug("Deleting Channels with {}", channels);
        this.wmGenericDao.delete(channels);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Channels> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Channels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Channels> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Channels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SalesVision for table Channels to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SalesVision for table Channels to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Reps> findAssociatedRepses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated repses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("channels.id = '" + id + "'");

        return repsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RepsService instance
     */
    protected void setRepsService(RepsService service) {
        this.repsService = service;
    }

}
