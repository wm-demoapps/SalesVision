/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.FollowUps;
import com.salesvision.salesvision.Quotes;
import com.salesvision.salesvision.Sales;

/**
 * Service object for domain model class {@link Quotes}.
 */
public interface QuotesService {

    /**
     * Creates a new Quotes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Quotes if any.
     *
     * @param quotes Details of the Quotes to be created; value cannot be null.
     * @return The newly created Quotes.
     */
    Quotes create(@Valid Quotes quotes);


	/**
     * Returns Quotes by given id if exists.
     *
     * @param quotesId The id of the Quotes to get; value cannot be null.
     * @return Quotes associated with the given quotesId.
	 * @throws EntityNotFoundException If no Quotes is found.
     */
    Quotes getById(Integer quotesId);

    /**
     * Find and return the Quotes by given id if exists, returns null otherwise.
     *
     * @param quotesId The id of the Quotes to get; value cannot be null.
     * @return Quotes associated with the given quotesId.
     */
    Quotes findById(Integer quotesId);

	/**
     * Find and return the list of Quotes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param quotesIds The id's of the Quotes to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Quotes associated with the given quotesIds.
     */
    List<Quotes> findByMultipleIds(List<Integer> quotesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Quotes. It replaces all fields of the existing Quotes with the given quotes.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Quotes if any.
     *
     * @param quotes The details of the Quotes to be updated; value cannot be null.
     * @return The updated Quotes.
     * @throws EntityNotFoundException if no Quotes is found with given input.
     */
    Quotes update(@Valid Quotes quotes);


    /**
     * Partially updates the details of an existing Quotes. It updates only the
     * fields of the existing Quotes which are passed in the quotesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Quotes if any.
     *
     * @param quotesId The id of the Quotes to be deleted; value cannot be null.
     * @param quotesPatch The partial data of Quotes which is supposed to be updated; value cannot be null.
     * @return The updated Quotes.
     * @throws EntityNotFoundException if no Quotes is found with given input.
     */
    Quotes partialUpdate(Integer quotesId, Map<String, Object> quotesPatch);

    /**
     * Deletes an existing Quotes with the given id.
     *
     * @param quotesId The id of the Quotes to be deleted; value cannot be null.
     * @return The deleted Quotes.
     * @throws EntityNotFoundException if no Quotes found with the given id.
     */
    Quotes delete(Integer quotesId);

    /**
     * Deletes an existing Quotes with the given object.
     *
     * @param quotes The instance of the Quotes to be deleted; value cannot be null.
     */
    void delete(Quotes quotes);

    /**
     * Find all Quotes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Quotes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Quotes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Quotes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Quotes.
     *
     * @see Pageable
     * @see Page
     */
    Page<Quotes> findAll(String query, Pageable pageable);

    /**
     * Exports all Quotes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Quotes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Quotes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Quotes.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated followUpses for given Quotes id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated FollowUps instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<FollowUps> findAssociatedFollowUpses(Integer id, Pageable pageable);

    /*
     * Returns the associated saleses for given Quotes id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Sales instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Sales> findAssociatedSaleses(Integer id, Pageable pageable);

}
