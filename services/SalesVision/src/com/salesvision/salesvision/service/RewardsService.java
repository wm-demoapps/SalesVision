/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.Rewards;

/**
 * Service object for domain model class {@link Rewards}.
 */
public interface RewardsService {

    /**
     * Creates a new Rewards. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Rewards if any.
     *
     * @param rewards Details of the Rewards to be created; value cannot be null.
     * @return The newly created Rewards.
     */
    Rewards create(@Valid Rewards rewards);


	/**
     * Returns Rewards by given id if exists.
     *
     * @param rewardsId The id of the Rewards to get; value cannot be null.
     * @return Rewards associated with the given rewardsId.
	 * @throws EntityNotFoundException If no Rewards is found.
     */
    Rewards getById(Integer rewardsId);

    /**
     * Find and return the Rewards by given id if exists, returns null otherwise.
     *
     * @param rewardsId The id of the Rewards to get; value cannot be null.
     * @return Rewards associated with the given rewardsId.
     */
    Rewards findById(Integer rewardsId);

	/**
     * Find and return the list of Rewards by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param rewardsIds The id's of the Rewards to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Rewards associated with the given rewardsIds.
     */
    List<Rewards> findByMultipleIds(List<Integer> rewardsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Rewards. It replaces all fields of the existing Rewards with the given rewards.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Rewards if any.
     *
     * @param rewards The details of the Rewards to be updated; value cannot be null.
     * @return The updated Rewards.
     * @throws EntityNotFoundException if no Rewards is found with given input.
     */
    Rewards update(@Valid Rewards rewards);


    /**
     * Partially updates the details of an existing Rewards. It updates only the
     * fields of the existing Rewards which are passed in the rewardsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Rewards if any.
     *
     * @param rewardsId The id of the Rewards to be deleted; value cannot be null.
     * @param rewardsPatch The partial data of Rewards which is supposed to be updated; value cannot be null.
     * @return The updated Rewards.
     * @throws EntityNotFoundException if no Rewards is found with given input.
     */
    Rewards partialUpdate(Integer rewardsId, Map<String, Object> rewardsPatch);

    /**
     * Deletes an existing Rewards with the given id.
     *
     * @param rewardsId The id of the Rewards to be deleted; value cannot be null.
     * @return The deleted Rewards.
     * @throws EntityNotFoundException if no Rewards found with the given id.
     */
    Rewards delete(Integer rewardsId);

    /**
     * Deletes an existing Rewards with the given object.
     *
     * @param rewards The instance of the Rewards to be deleted; value cannot be null.
     */
    void delete(Rewards rewards);

    /**
     * Find all Rewards matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Rewards.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Rewards> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Rewards matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Rewards.
     *
     * @see Pageable
     * @see Page
     */
    Page<Rewards> findAll(String query, Pageable pageable);

    /**
     * Exports all Rewards matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Rewards matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Rewards in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Rewards.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
