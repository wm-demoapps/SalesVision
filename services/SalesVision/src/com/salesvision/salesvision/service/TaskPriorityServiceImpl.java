/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.TaskPriority;
import com.salesvision.salesvision.Tasks;


/**
 * ServiceImpl object for domain model class TaskPriority.
 *
 * @see TaskPriority
 */
@Service("SalesVision.TaskPriorityService")
@Validated
@EntityService(entityClass = TaskPriority.class, serviceId = "SalesVision")
public class TaskPriorityServiceImpl implements TaskPriorityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaskPriorityServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SalesVision.TasksService")
    private TasksService tasksService;

    @Autowired
    @Qualifier("SalesVision.TaskPriorityDao")
    private WMGenericDao<TaskPriority, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TaskPriority, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public TaskPriority create(TaskPriority taskPriorityInstance) {
        LOGGER.debug("Creating a new TaskPriority with information: {}", taskPriorityInstance);

        TaskPriority taskPriorityInstanceCreated = this.wmGenericDao.create(taskPriorityInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(taskPriorityInstanceCreated);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public TaskPriority getById(Integer taskpriorityId) {
        LOGGER.debug("Finding TaskPriority by id: {}", taskpriorityId);
        return this.wmGenericDao.findById(taskpriorityId);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public TaskPriority findById(Integer taskpriorityId) {
        LOGGER.debug("Finding TaskPriority by id: {}", taskpriorityId);
        try {
            return this.wmGenericDao.findById(taskpriorityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TaskPriority found with id: {}", taskpriorityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public List<TaskPriority> findByMultipleIds(List<Integer> taskpriorityIds, boolean orderedReturn) {
        LOGGER.debug("Finding TaskPriorities by ids: {}", taskpriorityIds);

        return this.wmGenericDao.findByMultipleIds(taskpriorityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesVisionTransactionManager")
    @Override
    public TaskPriority update(TaskPriority taskPriorityInstance) {
        LOGGER.debug("Updating TaskPriority with information: {}", taskPriorityInstance);

        this.wmGenericDao.update(taskPriorityInstance);
        this.wmGenericDao.refresh(taskPriorityInstance);

        return taskPriorityInstance;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public TaskPriority partialUpdate(Integer taskpriorityId, Map<String, Object>taskPriorityInstancePatch) {
        LOGGER.debug("Partially Updating the TaskPriority with id: {}", taskpriorityId);

        TaskPriority taskPriorityInstance = getById(taskpriorityId);

        try {
            ObjectReader taskPriorityInstanceReader = this.objectMapper.reader().forType(TaskPriority.class).withValueToUpdate(taskPriorityInstance);
            taskPriorityInstance = taskPriorityInstanceReader.readValue(this.objectMapper.writeValueAsString(taskPriorityInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", taskPriorityInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        taskPriorityInstance = update(taskPriorityInstance);

        return taskPriorityInstance;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public TaskPriority delete(Integer taskpriorityId) {
        LOGGER.debug("Deleting TaskPriority with id: {}", taskpriorityId);
        TaskPriority deleted = this.wmGenericDao.findById(taskpriorityId);
        if (deleted == null) {
            LOGGER.debug("No TaskPriority found with id: {}", taskpriorityId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TaskPriority.class.getSimpleName(), taskpriorityId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public void delete(TaskPriority taskPriorityInstance) {
        LOGGER.debug("Deleting TaskPriority with {}", taskPriorityInstance);
        this.wmGenericDao.delete(taskPriorityInstance);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<TaskPriority> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TaskPriorities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<TaskPriority> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TaskPriorities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SalesVision for table TaskPriority to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SalesVision for table TaskPriority to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Tasks> findAssociatedTaskses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated taskses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("taskPriority.id = '" + id + "'");

        return tasksService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service TasksService instance
     */
    protected void setTasksService(TasksService service) {
        this.tasksService = service;
    }

}
