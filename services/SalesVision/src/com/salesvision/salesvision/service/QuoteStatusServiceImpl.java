/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.QuoteStatus;
import com.salesvision.salesvision.Quotes;


/**
 * ServiceImpl object for domain model class QuoteStatus.
 *
 * @see QuoteStatus
 */
@Service("SalesVision.QuoteStatusService")
@Validated
@EntityService(entityClass = QuoteStatus.class, serviceId = "SalesVision")
public class QuoteStatusServiceImpl implements QuoteStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QuoteStatusServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SalesVision.QuotesService")
    private QuotesService quotesService;

    @Autowired
    @Qualifier("SalesVision.QuoteStatusDao")
    private WMGenericDao<QuoteStatus, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<QuoteStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public QuoteStatus create(QuoteStatus quoteStatusInstance) {
        LOGGER.debug("Creating a new QuoteStatus with information: {}", quoteStatusInstance);

        QuoteStatus quoteStatusInstanceCreated = this.wmGenericDao.create(quoteStatusInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(quoteStatusInstanceCreated);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public QuoteStatus getById(Integer quotestatusId) {
        LOGGER.debug("Finding QuoteStatus by id: {}", quotestatusId);
        return this.wmGenericDao.findById(quotestatusId);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public QuoteStatus findById(Integer quotestatusId) {
        LOGGER.debug("Finding QuoteStatus by id: {}", quotestatusId);
        try {
            return this.wmGenericDao.findById(quotestatusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No QuoteStatus found with id: {}", quotestatusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public List<QuoteStatus> findByMultipleIds(List<Integer> quotestatusIds, boolean orderedReturn) {
        LOGGER.debug("Finding QuoteStatuses by ids: {}", quotestatusIds);

        return this.wmGenericDao.findByMultipleIds(quotestatusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesVisionTransactionManager")
    @Override
    public QuoteStatus update(QuoteStatus quoteStatusInstance) {
        LOGGER.debug("Updating QuoteStatus with information: {}", quoteStatusInstance);

        this.wmGenericDao.update(quoteStatusInstance);
        this.wmGenericDao.refresh(quoteStatusInstance);

        return quoteStatusInstance;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public QuoteStatus partialUpdate(Integer quotestatusId, Map<String, Object>quoteStatusInstancePatch) {
        LOGGER.debug("Partially Updating the QuoteStatus with id: {}", quotestatusId);

        QuoteStatus quoteStatusInstance = getById(quotestatusId);

        try {
            ObjectReader quoteStatusInstanceReader = this.objectMapper.reader().forType(QuoteStatus.class).withValueToUpdate(quoteStatusInstance);
            quoteStatusInstance = quoteStatusInstanceReader.readValue(this.objectMapper.writeValueAsString(quoteStatusInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", quoteStatusInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        quoteStatusInstance = update(quoteStatusInstance);

        return quoteStatusInstance;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public QuoteStatus delete(Integer quotestatusId) {
        LOGGER.debug("Deleting QuoteStatus with id: {}", quotestatusId);
        QuoteStatus deleted = this.wmGenericDao.findById(quotestatusId);
        if (deleted == null) {
            LOGGER.debug("No QuoteStatus found with id: {}", quotestatusId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), QuoteStatus.class.getSimpleName(), quotestatusId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public void delete(QuoteStatus quoteStatusInstance) {
        LOGGER.debug("Deleting QuoteStatus with {}", quoteStatusInstance);
        this.wmGenericDao.delete(quoteStatusInstance);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<QuoteStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all QuoteStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<QuoteStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all QuoteStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SalesVision for table QuoteStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SalesVision for table QuoteStatus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Quotes> findAssociatedQuoteses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated quoteses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("quoteStatus.id = '" + id + "'");

        return quotesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service QuotesService instance
     */
    protected void setQuotesService(QuotesService service) {
        this.quotesService = service;
    }

}
