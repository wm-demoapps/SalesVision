/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.Products;
import com.salesvision.salesvision.Quotes;
import com.salesvision.salesvision.Sales;

/**
 * Service object for domain model class {@link Products}.
 */
public interface ProductsService {

    /**
     * Creates a new Products. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Products if any.
     *
     * @param products Details of the Products to be created; value cannot be null.
     * @return The newly created Products.
     */
    Products create(@Valid Products products);


	/**
     * Returns Products by given id if exists.
     *
     * @param productsId The id of the Products to get; value cannot be null.
     * @return Products associated with the given productsId.
	 * @throws EntityNotFoundException If no Products is found.
     */
    Products getById(Integer productsId);

    /**
     * Find and return the Products by given id if exists, returns null otherwise.
     *
     * @param productsId The id of the Products to get; value cannot be null.
     * @return Products associated with the given productsId.
     */
    Products findById(Integer productsId);

	/**
     * Find and return the list of Products by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param productsIds The id's of the Products to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Products associated with the given productsIds.
     */
    List<Products> findByMultipleIds(List<Integer> productsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Products. It replaces all fields of the existing Products with the given products.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Products if any.
     *
     * @param products The details of the Products to be updated; value cannot be null.
     * @return The updated Products.
     * @throws EntityNotFoundException if no Products is found with given input.
     */
    Products update(@Valid Products products);


    /**
     * Partially updates the details of an existing Products. It updates only the
     * fields of the existing Products which are passed in the productsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Products if any.
     *
     * @param productsId The id of the Products to be deleted; value cannot be null.
     * @param productsPatch The partial data of Products which is supposed to be updated; value cannot be null.
     * @return The updated Products.
     * @throws EntityNotFoundException if no Products is found with given input.
     */
    Products partialUpdate(Integer productsId, Map<String, Object> productsPatch);

    /**
     * Deletes an existing Products with the given id.
     *
     * @param productsId The id of the Products to be deleted; value cannot be null.
     * @return The deleted Products.
     * @throws EntityNotFoundException if no Products found with the given id.
     */
    Products delete(Integer productsId);

    /**
     * Deletes an existing Products with the given object.
     *
     * @param products The instance of the Products to be deleted; value cannot be null.
     */
    void delete(Products products);

    /**
     * Find all Products matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Products.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Products> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Products matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Products.
     *
     * @see Pageable
     * @see Page
     */
    Page<Products> findAll(String query, Pageable pageable);

    /**
     * Exports all Products matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Products matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Products in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Products.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated quoteses for given Products id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Quotes instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Quotes> findAssociatedQuoteses(Integer id, Pageable pageable);

    /*
     * Returns the associated saleses for given Products id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Sales instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Sales> findAssociatedSaleses(Integer id, Pageable pageable);

}
