/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.salesvision.salesvision.FollowUps;
import com.salesvision.salesvision.Quotes;
import com.salesvision.salesvision.Sales;


/**
 * ServiceImpl object for domain model class Quotes.
 *
 * @see Quotes
 */
@Service("SalesVision.QuotesService")
@Validated
@EntityService(entityClass = Quotes.class, serviceId = "SalesVision")
public class QuotesServiceImpl implements QuotesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(QuotesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SalesVision.FollowUpsService")
    private FollowUpsService followUpsService;

    @Lazy
    @Autowired
    @Qualifier("SalesVision.SalesService")
    private SalesService salesService;

    @Autowired
    @Qualifier("SalesVision.QuotesDao")
    private WMGenericDao<Quotes, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Quotes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Quotes create(Quotes quotes) {
        LOGGER.debug("Creating a new Quotes with information: {}", quotes);

        Quotes quotesCreated = this.wmGenericDao.create(quotes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(quotesCreated);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Quotes getById(Integer quotesId) {
        LOGGER.debug("Finding Quotes by id: {}", quotesId);
        return this.wmGenericDao.findById(quotesId);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Quotes findById(Integer quotesId) {
        LOGGER.debug("Finding Quotes by id: {}", quotesId);
        try {
            return this.wmGenericDao.findById(quotesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Quotes found with id: {}", quotesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public List<Quotes> findByMultipleIds(List<Integer> quotesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Quotes by ids: {}", quotesIds);

        return this.wmGenericDao.findByMultipleIds(quotesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SalesVisionTransactionManager")
    @Override
    public Quotes update(Quotes quotes) {
        LOGGER.debug("Updating Quotes with information: {}", quotes);

        this.wmGenericDao.update(quotes);
        this.wmGenericDao.refresh(quotes);

        return quotes;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Quotes partialUpdate(Integer quotesId, Map<String, Object>quotesPatch) {
        LOGGER.debug("Partially Updating the Quotes with id: {}", quotesId);

        Quotes quotes = getById(quotesId);

        try {
            ObjectReader quotesReader = this.objectMapper.reader().forType(Quotes.class).withValueToUpdate(quotes);
            quotes = quotesReader.readValue(this.objectMapper.writeValueAsString(quotesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", quotesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        quotes = update(quotes);

        return quotes;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Quotes delete(Integer quotesId) {
        LOGGER.debug("Deleting Quotes with id: {}", quotesId);
        Quotes deleted = this.wmGenericDao.findById(quotesId);
        if (deleted == null) {
            LOGGER.debug("No Quotes found with id: {}", quotesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Quotes.class.getSimpleName(), quotesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public void delete(Quotes quotes) {
        LOGGER.debug("Deleting Quotes with {}", quotes);
        this.wmGenericDao.delete(quotes);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Quotes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Quotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Quotes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Quotes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SalesVision for table Quotes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SalesVision for table Quotes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<FollowUps> findAssociatedFollowUpses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated followUpses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("quotes.id = '" + id + "'");

        return followUpsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SalesVisionTransactionManager")
    @Override
    public Page<Sales> findAssociatedSaleses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated saleses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("quotes.id = '" + id + "'");

        return salesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FollowUpsService instance
     */
    protected void setFollowUpsService(FollowUpsService service) {
        this.followUpsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SalesService instance
     */
    protected void setSalesService(SalesService service) {
        this.salesService = service;
    }

}
