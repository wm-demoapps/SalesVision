/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.salesvision.salesvision.models.query.*;

@Service
public class SalesVisionQueryExecutorServiceImpl implements SalesVisionQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesVisionQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("SalesVisionWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "SalesVisionTransactionManager", readOnly = true)
    @Override
    public Page<GetDealStatusResponse> executeGetDealStatus(String reportingHead, String fromDate, String toDate, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("reportingHead", reportingHead);
        params.put("fromDate", fromDate);
        params.put("toDate", toDate);

        return queryExecutor.executeNamedQuery("getDealStatus", params, GetDealStatusResponse.class, pageable);
    }

    @Transactional(value = "SalesVisionTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDealStatus(String reportingHead, String fromDate, String toDate, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("reportingHead", reportingHead);
        params.put("fromDate", fromDate);
        params.put("toDate", toDate);

        QueryProcedureInput<GetDealStatusResponse> queryInput = new QueryProcedureInput<>("getDealStatus", params, GetDealStatusResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "SalesVisionTransactionManager", readOnly = true)
    @Override
    public Page<GetExistingCustomersResponse> executeGetExistingCustomers(String repid, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("repid", repid);

        return queryExecutor.executeNamedQuery("getExistingCustomers", params, GetExistingCustomersResponse.class, pageable);
    }

    @Transactional(value = "SalesVisionTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetExistingCustomers(String repid, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("repid", repid);

        QueryProcedureInput<GetExistingCustomersResponse> queryInput = new QueryProcedureInput<>("getExistingCustomers", params, GetExistingCustomersResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "SalesVisionTransactionManager")
    @Override
    public Integer executeUpdateQuoteStatusConverted(UpdateQuoteStatusConvertedRequest updateQuoteStatusConvertedRequest) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("quoteId", updateQuoteStatusConvertedRequest.getQuoteId());

        return queryExecutor.executeNamedQueryForUpdate("updateQuoteStatusConverted", params);
    }

    @Transactional(value = "SalesVisionTransactionManager", readOnly = true)
    @Override
    public Page<GetRepsCountResponse> executeGetRepsCount(String head, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("head", head);

        return queryExecutor.executeNamedQuery("getRepsCount", params, GetRepsCountResponse.class, pageable);
    }

    @Transactional(value = "SalesVisionTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetRepsCount(String head, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("head", head);

        QueryProcedureInput<GetRepsCountResponse> queryInput = new QueryProcedureInput<>("getRepsCount", params, GetRepsCountResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "SalesVisionTransactionManager", readOnly = true)
    @Override
    public GetSalesSumResponse executeGetSalesSum(String fromDate, String toDate, String reportingHead, String repId) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("fromDate", fromDate);
        params.put("toDate", toDate);
        params.put("reportingHead", reportingHead);
        params.put("repID", repId);

        return queryExecutor.executeNamedQuery("getSalesSum", params, GetSalesSumResponse.class);
    }

    @Transactional(value = "SalesVisionTransactionManager", readOnly = true)
    @Override
    public Page<GetTopPerformersResponse> executeGetTopPerformers(String target, String reportingHeadId, String fromDate, String toDate, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("target", target);
        params.put("reportingHeadId", reportingHeadId);
        params.put("fromDate", fromDate);
        params.put("toDate", toDate);

        return queryExecutor.executeNamedQuery("getTopPerformers", params, GetTopPerformersResponse.class, pageable);
    }

    @Transactional(value = "SalesVisionTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTopPerformers(String target, String reportingHeadId, String fromDate, String toDate, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("target", target);
        params.put("reportingHeadId", reportingHeadId);
        params.put("fromDate", fromDate);
        params.put("toDate", toDate);

        QueryProcedureInput<GetTopPerformersResponse> queryInput = new QueryProcedureInput<>("getTopPerformers", params, GetTopPerformersResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "SalesVisionTransactionManager", readOnly = true)
    @Override
    public Page<GetTopSellingSalesResponse> executeGetTopSellingSales(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getTopSellingSales", params, GetTopSellingSalesResponse.class, pageable);
    }

    @Transactional(value = "SalesVisionTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetTopSellingSales(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetTopSellingSalesResponse> queryInput = new QueryProcedureInput<>("getTopSellingSales", params, GetTopSellingSalesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}
