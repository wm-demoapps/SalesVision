/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Reps generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`REPS`")
public class Reps implements Serializable {

    private Integer id;
    private String name;
    private Integer channelType;
    private String street;
    private String city;
    private String state;
    private String zip;
    private String picurl;
    private String password;
    private String role;
    private String username;
    private String email;
    private String phone;
    private String officeAddress;
    private Integer reportingHead;
    private Integer stateIdRef;
    private Reps repsByReportingHead;
    private States states;
    private Channels channels;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`NAME`", nullable = false, length = 32)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`CHANNEL_TYPE`", nullable = true, scale = 0, precision = 10)
    public Integer getChannelType() {
        return this.channelType;
    }

    public void setChannelType(Integer channelType) {
        this.channelType = channelType;
    }

    @Column(name = "`STREET`", nullable = true, length = 64)
    public String getStreet() {
        return this.street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    @Column(name = "`CITY`", nullable = true, length = 32)
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "`STATE`", nullable = true, length = 2)
    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    @Column(name = "`ZIP`", nullable = true, length = 6)
    public String getZip() {
        return this.zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    @Column(name = "`PICURL`", nullable = true, length = 1024)
    public String getPicurl() {
        return this.picurl;
    }

    public void setPicurl(String picurl) {
        this.picurl = picurl;
    }

    @Column(name = "`PASSWORD`", nullable = true, length = 32)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "`ROLE`", nullable = true, length = 32)
    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    @Column(name = "`USERNAME`", nullable = true, length = 32)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "`EMAIL`", nullable = true, length = 255)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`PHONE`", nullable = true, length = 255)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "`OFFICE_ADDRESS`", nullable = true, length = 555)
    public String getOfficeAddress() {
        return this.officeAddress;
    }

    public void setOfficeAddress(String officeAddress) {
        this.officeAddress = officeAddress;
    }

    @Column(name = "`REPORTING_HEAD`", nullable = true, scale = 0, precision = 10)
    public Integer getReportingHead() {
        return this.reportingHead;
    }

    public void setReportingHead(Integer reportingHead) {
        this.reportingHead = reportingHead;
    }

    @Column(name = "`STATE_ID_REF`", nullable = true, scale = 0, precision = 10)
    public Integer getStateIdRef() {
        return this.stateIdRef;
    }

    public void setStateIdRef(Integer stateIdRef) {
        this.stateIdRef = stateIdRef;
    }

    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"repsByReportingHead", "repsesForReportingHead"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`REPORTING_HEAD`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_REPS_TO_REPS_REPORTINFhKxF`"))
    @Fetch(FetchMode.JOIN)
    public Reps getRepsByReportingHead() {
        return this.repsByReportingHead;
    }

    public void setRepsByReportingHead(Reps repsByReportingHead) {
        if(repsByReportingHead != null) {
            this.reportingHead = repsByReportingHead.getId();
        }

        this.repsByReportingHead = repsByReportingHead;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`STATE_ID_REF`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_REPS_TO_STATES_STATE_zVshL`"))
    @Fetch(FetchMode.JOIN)
    public States getStates() {
        return this.states;
    }

    public void setStates(States states) {
        if(states != null) {
            this.stateIdRef = states.getId();
        }

        this.states = states;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CHANNEL_TYPE`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_REP_CHANNEL_TYPE`"))
    @Fetch(FetchMode.JOIN)
    public Channels getChannels() {
        return this.channels;
    }

    public void setChannels(Channels channels) {
        if(channels != null) {
            this.channelType = channels.getId();
        }

        this.channels = channels;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Reps)) return false;
        final Reps reps = (Reps) o;
        return Objects.equals(getId(), reps.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
