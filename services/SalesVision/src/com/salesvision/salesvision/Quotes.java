/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.salesvision;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Quotes generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`QUOTES`")
public class Quotes implements Serializable {

    private Integer id;
    private Date entryDate;
    private Integer repId;
    private Integer estimatedSale;
    private Integer customerId;
    private Integer quoteStatusRef;
    private Date expectedCloseDate;
    private Boolean isSalesConverted;
    private Integer productId;
    private Reps reps;
    private Customers customers;
    private Products products;
    private QuoteStatus quoteStatus;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`ENTRY_DATE`", nullable = true)
    public Date getEntryDate() {
        return this.entryDate;
    }

    public void setEntryDate(Date entryDate) {
        this.entryDate = entryDate;
    }

    @Column(name = "`REP_ID`", nullable = true, scale = 0, precision = 10)
    public Integer getRepId() {
        return this.repId;
    }

    public void setRepId(Integer repId) {
        this.repId = repId;
    }

    @Column(name = "`ESTIMATED_SALE`", nullable = true, scale = 0, precision = 10)
    public Integer getEstimatedSale() {
        return this.estimatedSale;
    }

    public void setEstimatedSale(Integer estimatedSale) {
        this.estimatedSale = estimatedSale;
    }

    @Column(name = "`CUSTOMER_ID`", nullable = true, scale = 0, precision = 10)
    public Integer getCustomerId() {
        return this.customerId;
    }

    public void setCustomerId(Integer customerId) {
        this.customerId = customerId;
    }

    @Column(name = "`QUOTE_STATUS_REF`", nullable = true, scale = 0, precision = 10)
    public Integer getQuoteStatusRef() {
        return this.quoteStatusRef;
    }

    public void setQuoteStatusRef(Integer quoteStatusRef) {
        this.quoteStatusRef = quoteStatusRef;
    }

    @Column(name = "`EXPECTED_CLOSE_DATE`", nullable = true)
    public Date getExpectedCloseDate() {
        return this.expectedCloseDate;
    }

    public void setExpectedCloseDate(Date expectedCloseDate) {
        this.expectedCloseDate = expectedCloseDate;
    }

    @Column(name = "`IS_SALES_CONVERTED`", nullable = true)
    public Boolean getIsSalesConverted() {
        return this.isSalesConverted;
    }

    public void setIsSalesConverted(Boolean isSalesConverted) {
        this.isSalesConverted = isSalesConverted;
    }

    @Column(name = "`PRODUCT_ID`", nullable = true, scale = 0, precision = 10)
    public Integer getProductId() {
        return this.productId;
    }

    public void setProductId(Integer productId) {
        this.productId = productId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`REP_ID`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUOTES_REP_ID`"))
    @Fetch(FetchMode.JOIN)
    public Reps getReps() {
        return this.reps;
    }

    public void setReps(Reps reps) {
        if(reps != null) {
            this.repId = reps.getId();
        }

        this.reps = reps;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CUSTOMER_ID`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUOTES_TO_CUSTOMERS_CCDTuz`"))
    @Fetch(FetchMode.JOIN)
    public Customers getCustomers() {
        return this.customers;
    }

    public void setCustomers(Customers customers) {
        if(customers != null) {
            this.customerId = customers.getId();
        }

        this.customers = customers;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PRODUCT_ID`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUOTES_TO_PRODUCTS_PRIU0WD`"))
    @Fetch(FetchMode.JOIN)
    public Products getProducts() {
        return this.products;
    }

    public void setProducts(Products products) {
        if(products != null) {
            this.productId = products.getId();
        }

        this.products = products;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`QUOTE_STATUS_REF`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_QUOTES_TO_QUOTE_STATUAPV0R`"))
    @Fetch(FetchMode.JOIN)
    public QuoteStatus getQuoteStatus() {
        return this.quoteStatus;
    }

    public void setQuoteStatus(QuoteStatus quoteStatus) {
        if(quoteStatus != null) {
            this.quoteStatusRef = quoteStatus.getId();
        }

        this.quoteStatus = quoteStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Quotes)) return false;
        final Quotes quotes = (Quotes) o;
        return Objects.equals(getId(), quotes.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
